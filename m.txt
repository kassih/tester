Vulnerability: Stored Cross-Site Scripting (XSS) via File Name
üìÑ Description:
Stored Cross-Site Scripting (XSS) occurs when untrusted input is stored by the application and later rendered in a web page without proper encoding or sanitization. In this case, the application fails to sanitize the file name when displaying it in the UI, which allows an attacker to inject and execute arbitrary JavaScript in the context of other users.

This vulnerability enables an attacker to perform malicious actions such as session hijacking, redirecting users to phishing pages, stealing credentials, or performing actions on behalf of authenticated users.

üîç Observation:
During testing, it was observed that when uploading a file with a specially crafted name containing JavaScript code, the payload was later executed when viewing the task where the file was listed.

For example, uploading a file with the following name:

html
Copy
Edit
"><script>alert('XSS')</script>.jpg
resulted in the payload being executed as soon as the task page was visited, confirming the presence of a Stored XSS vulnerability.

This indicates that the application directly renders user-supplied input (the file name) into the DOM without proper HTML encoding or sanitization.

‚ö†Ô∏è Impact:
An attacker can exploit this vulnerability to:

Execute arbitrary JavaScript in the browser of any user who views the affected page.

Steal session cookies or sensitive information.

Perform actions on behalf of users (e.g., changing settings, submitting forms).

Launch further attacks such as phishing or malware delivery.

If an admin or privileged user views the page, the attacker may escalate their access or gain control over administrative functions.

‚úÖ Recommendation:
To mitigate this vulnerability:

Always sanitize and encode user-supplied input before rendering it in the HTML context.

Use frameworks or libraries that automatically handle output encoding.

Apply context-aware output encoding (e.g., HTML entity encoding for innerHTML, JavaScript escaping for inline scripts, etc.).

Conduct regular security reviews and testing to catch XSS in dynamic parts of the UI.
