Description
The application includes a url parameter that is used to dynamically load external content into an iframe without any domain validation or restrictions. This allows an attacker to embed a malicious or phishing website within the trusted application‚Äôs interface by simply supplying a crafted URL such as "http://portalprocesosqa.axa.com.mx/ProcessPortal/jsp/socialPortal/dashboard.jsp?url=//evil.com". While the malicious content is rendered, the browser's address bar continues to display the legitimate domain, which can mislead users into thinking they are interacting with a trusted page. This behavior poses a significant risk of phishing, brand impersonation, and user deception, as it enables attackers to present harmful content under the appearance of a legitimate site.

üîç Observation
It was observed that the url parameter in the endpoint "http://portalprocesosqa.axa.com.mx/ProcessPortal/jsp/socialPortal/dashboard.jsp?url=//evil.com" accepts arbitrary URLs and directly injects them into an iframe on the page without validation or restriction. By supplying a value such as //evil.com, the content from the external domain is rendered inside an iframe while the browser continues to display the example.com domain. This behavior was confirmed by visiting the crafted URL and observing that the external website's content was fully displayed within the page layout.

‚ö†Ô∏è Impact
This vulnerability allows attackers to embed malicious or deceptive content under the appearance of the trusted domain, increasing the risk of phishing, credential harvesting, clickjacking, and brand abuse. Victims may be tricked into believing they are interacting with legitimate functionality, which can result in the disclosure of sensitive information or unintentional actions performed on malicious content. The presence of the trusted domain in the URL bar further enhances the believability of such attacks.

‚úÖ Recommendation
To mitigate this issue, the application should validate the url parameter against a strict allowlist of trusted internal domains before loading it into the iframe. If loading external content is not a core requirement, this feature should be disabled entirely. Additionally, output should be properly sanitized before being rendered into HTML attributes like src, and a robust Content Security Policy (CSP) should be implemented to control what content can be framed or loaded from external sources.

