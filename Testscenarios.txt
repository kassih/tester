Test Scenario 1: Special Character Injection Causes IVR Exception

Test Attempt: During the test, we provided the input ><>'; when prompted for a name.
Observed Behavior: Instead of processing the input, the system immediately forwarded the call to a human agent.
Analysis: This suggests that the system may have a safeguard mechanism that redirects calls when it detects potentially malicious input, or it may have encountered an error while parsing the input.

⸻

Test Scenario 2: Long Input Causes Call Termination

Test Attempt: We tested an excessively long name input ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA") to assess input length handling.
Observed Behavior: The call was unexpectedly terminated without any error message or redirection to an agent.
Analysis: The abrupt termination indicates a potential buffer overflow or improper input validation.

⸻

Test Scenario 3: SQL-Inspired Input Triggers Security Measure

Test Attempt: When prompted for a policy number, we entered "John' OR '1'='1".
Observed Behavior: The system did not proceed with verification and instead forwarded the call to an agent.
Analysis: The system might have a basic security filter that detects SQL-like patterns and redirects suspicious calls. However, this also suggests that user input is being processed in a way that could lead to injection vulnerabilities.

⸻

Test Scenario 4: Unexpected Numerical Input Leads to Error Handling

Test Attempt: Instead of a valid policy number, we entered an extremely large number (9999999999).
Observed Behavior: The IVR system responded with an error message before automatically terminating the call.
Analysis: The system likely has a numeric validation mechanism, but the abrupt termination suggests it may not be handling invalid inputs gracefully.

⸻

Test Scenario 5: Silence Attack Triggers Unexpected Redirection

Test Attempt: We remained silent for 30 seconds instead of responding to the prompt.
Observed Behavior: The system automatically redirected the call to an agent instead of retrying or terminating the call.
Analysis: This suggests that the IVR system lacks proper timeout handling and may be relying on agent fallback in cases of unrecognized input. This could be exploited for denial-of-service (DoS) attacks by repeatedly triggering silent calls.





The target system includes an Interactive Voice Response (IVR) platform designed to automate customer interactions over the phone. The IVR collects key user information—such as first name, last name, and policy number—through voice or keypad input.





Test Scenario 6: HTML Tag Injection Triggers Redirection
Test Attempt: We verbally injected HTML-like input by saying "<input>" when prompted for the first name.
Observed Behavior: The IVR system immediately redirected the call to a human agent.
Analysis: This suggests the system may be interpreting or filtering input that resembles HTML, potentially as a safeguard against injection attacks. This behavior may indicate insecure input parsing or overly broad filtering rules.

Test Scenario 7: Use of System Keywords Disrupts Flow
Test Attempt: We said the word "admin" when prompted for a name.
Observed Behavior: The IVR paused briefly, then routed the call to an agent.
Analysis: Certain reserved or sensitive keywords may be monitored by the system and could trigger escalation. This behavior can be indicative of logic designed to detect high-risk inputs but may also reveal information about system rules or user roles.

Test Scenario 8: Input with Mixed Characters Causes IVR Confusion
Test Attempt: We provided an input combining letters and special characters: "John123!@#"
Observed Behavior: The system played an error message and asked to repeat the input. After the second attempt, the call was escalated to an agent.
Analysis: This input appears to have confused the IVR's recognition engine, possibly due to improper input sanitation or limited character recognition capabilities.
