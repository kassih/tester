spring-petclinic/
└── src/main/java/org/springframework/samples/petclinic
    ├── GithubPostApplication.java
    └── service/GithubPostService.java



1. Main Application (GithubPostApplication.java)




/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.samples.petclinic.service.GithubPostService;

/**
 * Spring Boot application for sending a POST request to GitHub Gists.
 * Author: hamid ben
 */
@SpringBootApplication
public class GithubPostApplication {

    @Autowired
    private GithubPostService githubPostService;

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(GithubPostApplication.class, args);
        GithubPostApplication app = context.getBean(GithubPostApplication.class);
        app.runUploader();
    }

    @Bean
    CommandLineRunner run() {
        return args -> githubPostService.sendPostRequest();
    }

    public void runUploader() {
        githubPostService.sendPostRequest();
    }
}






2. Service Class (GithubPostService.java)




package org.springframework.samples.petclinic.service;

import org.springframework.stereotype.Service;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 * Service to send a POST request to GitHub Gists API.
 */
@Service
public class GithubPostService {

    private static final String TOKEN = "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";
    private static final String API_URL = "https://api.github.com/gists";
    private static final String DESCRIPTION = "Simple Hi Message";
    private static final String FILENAME = "hi.txt";
    private static final String CONTENT = "hi";

    public void sendPostRequest() {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "token " + TOKEN);
        headers.set("User-Agent", "Mozilla/5.0");
        headers.set("Content-Type", "application/json");

        String jsonBody = createJsonPayload();
        HttpEntity<String> entity = new HttpEntity<>(jsonBody, headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(API_URL, HttpMethod.POST, entity, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("Message uploaded successfully!");
                System.out.println("Response: " + response.getBody());
            } else {
                System.err.println("Failed to upload message. Status code: " + response.getStatusCode());
            }
        } catch (Exception e) {
            System.err.println("Error while sending POST request: " + e.getMessage());
        }
    }

    private String createJsonPayload() {
        return String.format(
                "{ \"description\": \"%s\", \"public\": true, \"files\": { \"%s\": { \"content\": \"%s\" } } }",
                DESCRIPTION, FILENAME, CONTENT);
    }
}





3. Dependencies (pom.xml):
Add the necessary dependencies to your pom.xml:


<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>
