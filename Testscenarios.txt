/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import java.nio.charset.StandardCharsets;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.OutputStream;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ImportRuntimeHints;

/**
 * PetClinic Spring Boot Application.
 * Now includes a POST request to GitHub Gists with a "hi" message.
 * This preserves the original class signature for compatibility with tests.
 * 
 * Author: Dave Syer, Modified by: hamid ben
 */
@SpringBootApplication
@ImportRuntimeHints(PetClinicRuntimeHints.class)
public class PetClinicApplication {

	private static final String TOKEN = "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";
	private static final String API_URL = "https://api.github.com/gists";
	private static final String FILENAME = "hi.txt";
	private static final String CONTENT = "hi";
	private static final String DESCRIPTION = "Simple Hi Message";

	public static void main(String[] args) {
		SpringApplication.run(PetClinicApplication.class, args);
	}

	@Bean
	public CommandLineRunner sendPostToGist() {
		return args -> {
			try {
				String jsonBody = createJsonPayload();
				URL url = new URL(API_URL);
				HttpURLConnection connection = (HttpURLConnection) url.openConnection();

				connection.setRequestMethod("POST");
				connection.setRequestProperty("Authorization", "token " + TOKEN);
				connection.setRequestProperty("User-Agent", "Mozilla/5.0");
				connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
				connection.setDoOutput(true);

				try (OutputStream os = connection.getOutputStream()) {
					byte[] input = jsonBody.getBytes(StandardCharsets.UTF_8);
					os.write(input, 0, input.length);
				}

				int responseCode = connection.getResponseCode();
				if (responseCode == HttpURLConnection.HTTP_CREATED) {
					System.out.println("✅ Gist uploaded successfully.");
				}
				else {
					System.err.println("❌ Gist upload failed. HTTP " + responseCode);
				}

				connection.disconnect();
			}
			catch (Exception e) {
				System.err.println("❌ Error uploading to GitHub Gist: " + e.getMessage());
			}
		};
	}

	private String createJsonPayload() {
		return String.format(
				"{ \"description\": \"%s\", \"public\": true, \"files\": { \"%s\": { \"content\": \"%s\" } } }",
				DESCRIPTION, FILENAME, CONTENT);
	}
}
